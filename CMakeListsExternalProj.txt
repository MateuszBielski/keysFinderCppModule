cmake_minimum_required(VERSION 3.16)

project(keysFinderCppModule)

if (MSVC)
set(wxWidgets_ROOT_DIR D:\\programy\\keysFinder)
set(wxWidgets_CONFIGURATION mswud)
endif (MSVC)
#find_package( OpenCV REQUIRED )
#include_directories( ${OpenCV_INCLUDE_DIRS} )

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_BUILD_TYPE Debug)

if (MSVC)
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:WINDOWS")
	set(LIBRARY_OUTPUT_PATH "${CMAKE_BINARY_DIR}")
    set(EXECUTABLE_OUTPUT_PATH "${CMAKE_BINARY_DIR}")
	#add_compile_options(/W0)
    # add_compile_options(/showIncludes)
endif (MSVC)
if(UNIX)
    #add_compile_options(-H)
    add_compile_options(-fPIC)#static Glad is linked to dynamic Oglstuff
endif(UNIX)

#dowload and build opencv
set(openCVexternDir ${CMAKE_CURRENT_SOURCE_DIR}/../opencv)
configure_file(CMakeLists.txt.in ${openCVexternDir}/opencv-download/CMakeLists.txt)
execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" 
-D CMAKE_BUILD_TYPE=DEBUG 
-D CMAKE_INSTALL_PREFIX=${openCVexternDir}/opencv-build 
-D OPENCV_GENERATE_PKGCONFIG=ON 
-D BUILD_EXAMPLES=OFF 
-D INSTALL_PYTHON_EXAMPLES=OFF 
-D INSTALL_C_EXAMPLES=OFF 
-D PYTHON_EXECUTABLE=$(which python2) 
-D BUILD_opencv_python2=OFF 
-D PYTHON3_EXECUTABLE=$(which python3) 
-D PYTHON3_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") 
-D PYTHON3_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") 
. 
WORKING_DIRECTORY ${openCVexternDir}/opencv-src)
execute_process(COMMAND ${CMAKE_COMMAND} --build ${openCVexternDir}/opencv-src WORKING_DIRECTORY ${openCVexternDir}/opencv-build )

#add_subdirectory(${openCVexternDir}/opencv-src
#${openCVexternDir}/opencv-build 
#)
add_subdirectory(${openCVexternDir}/opencv-download)

set(includes 
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${CMAKE_CURRENT_SOURCE_DIR}/include
)

set ( CXX_SRCS
    src/main.cpp
    src/edgeprocessing.cpp
)
#add_compile_definitions(_USE_MATH_DEFINES)#for using M_PI constant
add_executable(${CMAKE_PROJECT_NAME} ${CXX_SRCS})
#target_link_libraries( ${CMAKE_PROJECT_NAME} ${OpenCV_LIBS} )
target_link_libraries( ${CMAKE_PROJECT_NAME} opencv)
target_include_directories(${CMAKE_PROJECT_NAME} PUBLIC ${includes})


            

    
